# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ...plant.types.plant import Plant
from .owner_id import OwnerId


class StoreCustomer(pydantic.BaseModel):
    name: str
    age: typing.Optional[int]
    plants: typing.List[Plant]
    lifetime_spend: float
    id: OwnerId

    class Partial(typing_extensions.TypedDict):
        name: typing_extensions.NotRequired[str]
        age: typing_extensions.NotRequired[typing.Optional[int]]
        plants: typing_extensions.NotRequired[typing.List[Plant]]
        lifetime_spend: typing_extensions.NotRequired[float]
        id: typing_extensions.NotRequired[OwnerId]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @StoreCustomer.Validators.root()
            def validate(values: StoreCustomer.Partial) -> StoreCustomer.Partial:
                ...

            @StoreCustomer.Validators.field("name")
            def validate_name(name: str, values: StoreCustomer.Partial) -> str:
                ...

            @StoreCustomer.Validators.field("age")
            def validate_age(age: typing.Optional[int], values: StoreCustomer.Partial) -> typing.Optional[int]:
                ...

            @StoreCustomer.Validators.field("plants")
            def validate_plants(plants: typing.List[Plant], values: StoreCustomer.Partial) -> typing.List[Plant]:
                ...

            @StoreCustomer.Validators.field("lifetime_spend")
            def validate_lifetime_spend(lifetime_spend: float, values: StoreCustomer.Partial) -> float:
                ...

            @StoreCustomer.Validators.field("id")
            def validate_id(id: OwnerId, values: StoreCustomer.Partial) -> OwnerId:
                ...
        """

        _pre_validators: typing.ClassVar[typing.List[StoreCustomer.Validators._PreRootValidator]] = []
        _post_validators: typing.ClassVar[typing.List[StoreCustomer.Validators._RootValidator]] = []
        _name_pre_validators: typing.ClassVar[typing.List[StoreCustomer.Validators.PreNameValidator]] = []
        _name_post_validators: typing.ClassVar[typing.List[StoreCustomer.Validators.NameValidator]] = []
        _age_pre_validators: typing.ClassVar[typing.List[StoreCustomer.Validators.PreAgeValidator]] = []
        _age_post_validators: typing.ClassVar[typing.List[StoreCustomer.Validators.AgeValidator]] = []
        _plants_pre_validators: typing.ClassVar[typing.List[StoreCustomer.Validators.PrePlantsValidator]] = []
        _plants_post_validators: typing.ClassVar[typing.List[StoreCustomer.Validators.PlantsValidator]] = []
        _lifetime_spend_pre_validators: typing.ClassVar[
            typing.List[StoreCustomer.Validators.PreLifetimeSpendValidator]
        ] = []
        _lifetime_spend_post_validators: typing.ClassVar[
            typing.List[StoreCustomer.Validators.LifetimeSpendValidator]
        ] = []
        _id_pre_validators: typing.ClassVar[typing.List[StoreCustomer.Validators.PreIdValidator]] = []
        _id_post_validators: typing.ClassVar[typing.List[StoreCustomer.Validators.IdValidator]] = []

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[StoreCustomer.Validators._RootValidator], StoreCustomer.Validators._RootValidator]:
            ...

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[[StoreCustomer.Validators._PreRootValidator], StoreCustomer.Validators._PreRootValidator]:
            ...

        @classmethod
        def root(cls, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if pre:
                    cls._pre_validators.append(validator)
                else:
                    cls._post_validators.append(validator)
                return validator

            return decorator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["name"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[[StoreCustomer.Validators.PreNameValidator], StoreCustomer.Validators.PreNameValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["name"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[StoreCustomer.Validators.NameValidator], StoreCustomer.Validators.NameValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["age"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[[StoreCustomer.Validators.PreAgeValidator], StoreCustomer.Validators.PreAgeValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["age"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[StoreCustomer.Validators.AgeValidator], StoreCustomer.Validators.AgeValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["plants"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [StoreCustomer.Validators.PrePlantsValidator], StoreCustomer.Validators.PrePlantsValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["plants"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[StoreCustomer.Validators.PlantsValidator], StoreCustomer.Validators.PlantsValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["lifetime_spend"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [StoreCustomer.Validators.PreLifetimeSpendValidator], StoreCustomer.Validators.PreLifetimeSpendValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls,
            field_name: typing_extensions.Literal["lifetime_spend"],
            *,
            pre: typing_extensions.Literal[False] = False,
        ) -> typing.Callable[
            [StoreCustomer.Validators.LifetimeSpendValidator], StoreCustomer.Validators.LifetimeSpendValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["id"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[[StoreCustomer.Validators.PreIdValidator], StoreCustomer.Validators.PreIdValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["id"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[StoreCustomer.Validators.IdValidator], StoreCustomer.Validators.IdValidator]:
            ...

        @classmethod
        def field(cls, field_name: str, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "name":
                    if pre:
                        cls._name_pre_validators.append(validator)
                    else:
                        cls._name_post_validators.append(validator)
                if field_name == "age":
                    if pre:
                        cls._age_pre_validators.append(validator)
                    else:
                        cls._age_post_validators.append(validator)
                if field_name == "plants":
                    if pre:
                        cls._plants_pre_validators.append(validator)
                    else:
                        cls._plants_post_validators.append(validator)
                if field_name == "lifetime_spend":
                    if pre:
                        cls._lifetime_spend_pre_validators.append(validator)
                    else:
                        cls._lifetime_spend_post_validators.append(validator)
                if field_name == "id":
                    if pre:
                        cls._id_pre_validators.append(validator)
                    else:
                        cls._id_post_validators.append(validator)
                return validator

            return decorator

        class PreNameValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: StoreCustomer.Partial) -> typing.Any:
                ...

        class NameValidator(typing_extensions.Protocol):
            def __call__(self, __v: str, __values: StoreCustomer.Partial) -> str:
                ...

        class PreAgeValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: StoreCustomer.Partial) -> typing.Any:
                ...

        class AgeValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Optional[int], __values: StoreCustomer.Partial) -> typing.Optional[int]:
                ...

        class PrePlantsValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: StoreCustomer.Partial) -> typing.Any:
                ...

        class PlantsValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.List[Plant], __values: StoreCustomer.Partial) -> typing.List[Plant]:
                ...

        class PreLifetimeSpendValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: StoreCustomer.Partial) -> typing.Any:
                ...

        class LifetimeSpendValidator(typing_extensions.Protocol):
            def __call__(self, __v: float, __values: StoreCustomer.Partial) -> float:
                ...

        class PreIdValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: StoreCustomer.Partial) -> typing.Any:
                ...

        class IdValidator(typing_extensions.Protocol):
            def __call__(self, __v: OwnerId, __values: StoreCustomer.Partial) -> OwnerId:
                ...

        class _PreRootValidator(typing_extensions.Protocol):
            def __call__(self, __values: typing.Any) -> typing.Any:
                ...

        class _RootValidator(typing_extensions.Protocol):
            def __call__(self, __values: StoreCustomer.Partial) -> StoreCustomer.Partial:
                ...

    @pydantic.root_validator(pre=True)
    def _pre_validate(cls, values: StoreCustomer.Partial) -> StoreCustomer.Partial:
        for validator in StoreCustomer.Validators._pre_validators:
            values = validator(values)
        return values

    @pydantic.root_validator(pre=False)
    def _post_validate(cls, values: StoreCustomer.Partial) -> StoreCustomer.Partial:
        for validator in StoreCustomer.Validators._post_validators:
            values = validator(values)
        return values

    @pydantic.validator("name", pre=True)
    def _pre_validate_name(cls, v: str, values: StoreCustomer.Partial) -> str:
        for validator in StoreCustomer.Validators._name_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("name", pre=False)
    def _post_validate_name(cls, v: str, values: StoreCustomer.Partial) -> str:
        for validator in StoreCustomer.Validators._name_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("age", pre=True)
    def _pre_validate_age(cls, v: typing.Optional[int], values: StoreCustomer.Partial) -> typing.Optional[int]:
        for validator in StoreCustomer.Validators._age_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("age", pre=False)
    def _post_validate_age(cls, v: typing.Optional[int], values: StoreCustomer.Partial) -> typing.Optional[int]:
        for validator in StoreCustomer.Validators._age_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("plants", pre=True)
    def _pre_validate_plants(cls, v: typing.List[Plant], values: StoreCustomer.Partial) -> typing.List[Plant]:
        for validator in StoreCustomer.Validators._plants_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("plants", pre=False)
    def _post_validate_plants(cls, v: typing.List[Plant], values: StoreCustomer.Partial) -> typing.List[Plant]:
        for validator in StoreCustomer.Validators._plants_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("lifetime_spend", pre=True)
    def _pre_validate_lifetime_spend(cls, v: float, values: StoreCustomer.Partial) -> float:
        for validator in StoreCustomer.Validators._lifetime_spend_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("lifetime_spend", pre=False)
    def _post_validate_lifetime_spend(cls, v: float, values: StoreCustomer.Partial) -> float:
        for validator in StoreCustomer.Validators._lifetime_spend_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("id", pre=True)
    def _pre_validate_id(cls, v: OwnerId, values: StoreCustomer.Partial) -> OwnerId:
        for validator in StoreCustomer.Validators._id_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("id", pre=False)
    def _post_validate_id(cls, v: OwnerId, values: StoreCustomer.Partial) -> OwnerId:
        for validator in StoreCustomer.Validators._id_post_validators:
            v = validator(v, values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        extra = pydantic.Extra.forbid
