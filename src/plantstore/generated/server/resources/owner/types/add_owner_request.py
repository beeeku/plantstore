# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ...plant.types.plant import Plant
from .owner_age import OwnerAge


class AddOwnerRequest(pydantic.BaseModel):
    name: str
    age: OwnerAge
    plants: typing.List[Plant]

    class Partial(typing_extensions.TypedDict):
        name: typing_extensions.NotRequired[str]
        age: typing_extensions.NotRequired[OwnerAge]
        plants: typing_extensions.NotRequired[typing.List[Plant]]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @AddOwnerRequest.Validators.root()
            def validate(values: AddOwnerRequest.Partial) -> AddOwnerRequest.Partial:
                ...

            @AddOwnerRequest.Validators.field("name")
            def validate_name(name: str, values: AddOwnerRequest.Partial) -> str:
                ...

            @AddOwnerRequest.Validators.field("age")
            def validate_age(age: OwnerAge, values: AddOwnerRequest.Partial) -> OwnerAge:
                ...

            @AddOwnerRequest.Validators.field("plants")
            def validate_plants(plants: typing.List[Plant], values: AddOwnerRequest.Partial) -> typing.List[Plant]:
                ...
        """

        _pre_validators: typing.ClassVar[typing.List[AddOwnerRequest.Validators._PreRootValidator]] = []
        _post_validators: typing.ClassVar[typing.List[AddOwnerRequest.Validators._RootValidator]] = []
        _name_pre_validators: typing.ClassVar[typing.List[AddOwnerRequest.Validators.PreNameValidator]] = []
        _name_post_validators: typing.ClassVar[typing.List[AddOwnerRequest.Validators.NameValidator]] = []
        _age_pre_validators: typing.ClassVar[typing.List[AddOwnerRequest.Validators.PreAgeValidator]] = []
        _age_post_validators: typing.ClassVar[typing.List[AddOwnerRequest.Validators.AgeValidator]] = []
        _plants_pre_validators: typing.ClassVar[typing.List[AddOwnerRequest.Validators.PrePlantsValidator]] = []
        _plants_post_validators: typing.ClassVar[typing.List[AddOwnerRequest.Validators.PlantsValidator]] = []

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[AddOwnerRequest.Validators._RootValidator], AddOwnerRequest.Validators._RootValidator]:
            ...

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [AddOwnerRequest.Validators._PreRootValidator], AddOwnerRequest.Validators._PreRootValidator
        ]:
            ...

        @classmethod
        def root(cls, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if pre:
                    cls._pre_validators.append(validator)
                else:
                    cls._post_validators.append(validator)
                return validator

            return decorator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["name"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [AddOwnerRequest.Validators.PreNameValidator], AddOwnerRequest.Validators.PreNameValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["name"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[AddOwnerRequest.Validators.NameValidator], AddOwnerRequest.Validators.NameValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["age"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[[AddOwnerRequest.Validators.PreAgeValidator], AddOwnerRequest.Validators.PreAgeValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["age"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[AddOwnerRequest.Validators.AgeValidator], AddOwnerRequest.Validators.AgeValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["plants"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [AddOwnerRequest.Validators.PrePlantsValidator], AddOwnerRequest.Validators.PrePlantsValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["plants"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[AddOwnerRequest.Validators.PlantsValidator], AddOwnerRequest.Validators.PlantsValidator]:
            ...

        @classmethod
        def field(cls, field_name: str, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "name":
                    if pre:
                        cls._name_pre_validators.append(validator)
                    else:
                        cls._name_post_validators.append(validator)
                if field_name == "age":
                    if pre:
                        cls._age_pre_validators.append(validator)
                    else:
                        cls._age_post_validators.append(validator)
                if field_name == "plants":
                    if pre:
                        cls._plants_pre_validators.append(validator)
                    else:
                        cls._plants_post_validators.append(validator)
                return validator

            return decorator

        class PreNameValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: AddOwnerRequest.Partial) -> typing.Any:
                ...

        class NameValidator(typing_extensions.Protocol):
            def __call__(self, __v: str, __values: AddOwnerRequest.Partial) -> str:
                ...

        class PreAgeValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: AddOwnerRequest.Partial) -> typing.Any:
                ...

        class AgeValidator(typing_extensions.Protocol):
            def __call__(self, __v: OwnerAge, __values: AddOwnerRequest.Partial) -> OwnerAge:
                ...

        class PrePlantsValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: AddOwnerRequest.Partial) -> typing.Any:
                ...

        class PlantsValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.List[Plant], __values: AddOwnerRequest.Partial) -> typing.List[Plant]:
                ...

        class _PreRootValidator(typing_extensions.Protocol):
            def __call__(self, __values: typing.Any) -> typing.Any:
                ...

        class _RootValidator(typing_extensions.Protocol):
            def __call__(self, __values: AddOwnerRequest.Partial) -> AddOwnerRequest.Partial:
                ...

    @pydantic.root_validator(pre=True)
    def _pre_validate(cls, values: AddOwnerRequest.Partial) -> AddOwnerRequest.Partial:
        for validator in AddOwnerRequest.Validators._pre_validators:
            values = validator(values)
        return values

    @pydantic.root_validator(pre=False)
    def _post_validate(cls, values: AddOwnerRequest.Partial) -> AddOwnerRequest.Partial:
        for validator in AddOwnerRequest.Validators._post_validators:
            values = validator(values)
        return values

    @pydantic.validator("name", pre=True)
    def _pre_validate_name(cls, v: str, values: AddOwnerRequest.Partial) -> str:
        for validator in AddOwnerRequest.Validators._name_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("name", pre=False)
    def _post_validate_name(cls, v: str, values: AddOwnerRequest.Partial) -> str:
        for validator in AddOwnerRequest.Validators._name_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("age", pre=True)
    def _pre_validate_age(cls, v: OwnerAge, values: AddOwnerRequest.Partial) -> OwnerAge:
        for validator in AddOwnerRequest.Validators._age_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("age", pre=False)
    def _post_validate_age(cls, v: OwnerAge, values: AddOwnerRequest.Partial) -> OwnerAge:
        for validator in AddOwnerRequest.Validators._age_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("plants", pre=True)
    def _pre_validate_plants(cls, v: typing.List[Plant], values: AddOwnerRequest.Partial) -> typing.List[Plant]:
        for validator in AddOwnerRequest.Validators._plants_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("plants", pre=False)
    def _post_validate_plants(cls, v: typing.List[Plant], values: AddOwnerRequest.Partial) -> typing.List[Plant]:
        for validator in AddOwnerRequest.Validators._plants_post_validators:
            v = validator(v, values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        extra = pydantic.Extra.forbid
