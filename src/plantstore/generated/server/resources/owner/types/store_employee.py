# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
import typing_extensions

from ...plant.types.plant import Plant
from .employee_id import EmployeeId
from .owner_id import OwnerId
from .store_customer import StoreCustomer


class StoreEmployee(StoreCustomer):
    employee_id: EmployeeId = pydantic.Field(alias="employeeId")

    class Partial(StoreCustomer.Partial):
        employee_id: typing_extensions.NotRequired[EmployeeId]

    class Validators:
        """
        Use this class to add validators to the Pydantic model.

            @StoreEmployee.Validators.root()
            def validate(values: StoreEmployee.Partial) -> StoreEmployee.Partial:
                ...

            @StoreEmployee.Validators.field("employee_id")
            def validate_employee_id(employee_id: EmployeeId, values: StoreEmployee.Partial) -> EmployeeId:
                ...

            @StoreEmployee.Validators.field("name")
            def validate_name(name: str, values: StoreEmployee.Partial) -> str:
                ...

            @StoreEmployee.Validators.field("age")
            def validate_age(age: typing.Optional[int], values: StoreEmployee.Partial) -> typing.Optional[int]:
                ...

            @StoreEmployee.Validators.field("plants")
            def validate_plants(plants: typing.List[Plant], values: StoreEmployee.Partial) -> typing.List[Plant]:
                ...

            @StoreEmployee.Validators.field("lifetime_spend")
            def validate_lifetime_spend(lifetime_spend: float, values: StoreEmployee.Partial) -> float:
                ...

            @StoreEmployee.Validators.field("id")
            def validate_id(id: OwnerId, values: StoreEmployee.Partial) -> OwnerId:
                ...
        """

        _pre_validators: typing.ClassVar[typing.List[StoreEmployee.Validators._PreRootValidator]] = []
        _post_validators: typing.ClassVar[typing.List[StoreEmployee.Validators._RootValidator]] = []
        _employee_id_pre_validators: typing.ClassVar[typing.List[StoreEmployee.Validators.PreEmployeeIdValidator]] = []
        _employee_id_post_validators: typing.ClassVar[typing.List[StoreEmployee.Validators.EmployeeIdValidator]] = []
        _name_pre_validators: typing.ClassVar[typing.List[StoreEmployee.Validators.PreNameValidator]] = []
        _name_post_validators: typing.ClassVar[typing.List[StoreEmployee.Validators.NameValidator]] = []
        _age_pre_validators: typing.ClassVar[typing.List[StoreEmployee.Validators.PreAgeValidator]] = []
        _age_post_validators: typing.ClassVar[typing.List[StoreEmployee.Validators.AgeValidator]] = []
        _plants_pre_validators: typing.ClassVar[typing.List[StoreEmployee.Validators.PrePlantsValidator]] = []
        _plants_post_validators: typing.ClassVar[typing.List[StoreEmployee.Validators.PlantsValidator]] = []
        _lifetime_spend_pre_validators: typing.ClassVar[
            typing.List[StoreEmployee.Validators.PreLifetimeSpendValidator]
        ] = []
        _lifetime_spend_post_validators: typing.ClassVar[
            typing.List[StoreEmployee.Validators.LifetimeSpendValidator]
        ] = []
        _id_pre_validators: typing.ClassVar[typing.List[StoreEmployee.Validators.PreIdValidator]] = []
        _id_post_validators: typing.ClassVar[typing.List[StoreEmployee.Validators.IdValidator]] = []

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[StoreEmployee.Validators._RootValidator], StoreEmployee.Validators._RootValidator]:
            ...

        @typing.overload
        @classmethod
        def root(
            cls, *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[[StoreEmployee.Validators._PreRootValidator], StoreEmployee.Validators._PreRootValidator]:
            ...

        @classmethod
        def root(cls, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if pre:
                    cls._pre_validators.append(validator)
                else:
                    cls._post_validators.append(validator)
                return validator

            return decorator

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["employee_id"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [StoreEmployee.Validators.PreEmployeeIdValidator], StoreEmployee.Validators.PreEmployeeIdValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["employee_id"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[
            [StoreEmployee.Validators.EmployeeIdValidator], StoreEmployee.Validators.EmployeeIdValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["name"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[[StoreEmployee.Validators.PreNameValidator], StoreEmployee.Validators.PreNameValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["name"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[StoreEmployee.Validators.NameValidator], StoreEmployee.Validators.NameValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["age"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[[StoreEmployee.Validators.PreAgeValidator], StoreEmployee.Validators.PreAgeValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["age"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[StoreEmployee.Validators.AgeValidator], StoreEmployee.Validators.AgeValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["plants"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [StoreEmployee.Validators.PrePlantsValidator], StoreEmployee.Validators.PrePlantsValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["plants"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[StoreEmployee.Validators.PlantsValidator], StoreEmployee.Validators.PlantsValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["lifetime_spend"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[
            [StoreEmployee.Validators.PreLifetimeSpendValidator], StoreEmployee.Validators.PreLifetimeSpendValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls,
            field_name: typing_extensions.Literal["lifetime_spend"],
            *,
            pre: typing_extensions.Literal[False] = False,
        ) -> typing.Callable[
            [StoreEmployee.Validators.LifetimeSpendValidator], StoreEmployee.Validators.LifetimeSpendValidator
        ]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["id"], *, pre: typing_extensions.Literal[True]
        ) -> typing.Callable[[StoreEmployee.Validators.PreIdValidator], StoreEmployee.Validators.PreIdValidator]:
            ...

        @typing.overload
        @classmethod
        def field(
            cls, field_name: typing_extensions.Literal["id"], *, pre: typing_extensions.Literal[False] = False
        ) -> typing.Callable[[StoreEmployee.Validators.IdValidator], StoreEmployee.Validators.IdValidator]:
            ...

        @classmethod
        def field(cls, field_name: str, *, pre: bool = False) -> typing.Any:
            def decorator(validator: typing.Any) -> typing.Any:
                if field_name == "employee_id":
                    if pre:
                        cls._employee_id_pre_validators.append(validator)
                    else:
                        cls._employee_id_post_validators.append(validator)
                if field_name == "name":
                    if pre:
                        cls._name_pre_validators.append(validator)
                    else:
                        cls._name_post_validators.append(validator)
                if field_name == "age":
                    if pre:
                        cls._age_pre_validators.append(validator)
                    else:
                        cls._age_post_validators.append(validator)
                if field_name == "plants":
                    if pre:
                        cls._plants_pre_validators.append(validator)
                    else:
                        cls._plants_post_validators.append(validator)
                if field_name == "lifetime_spend":
                    if pre:
                        cls._lifetime_spend_pre_validators.append(validator)
                    else:
                        cls._lifetime_spend_post_validators.append(validator)
                if field_name == "id":
                    if pre:
                        cls._id_pre_validators.append(validator)
                    else:
                        cls._id_post_validators.append(validator)
                return validator

            return decorator

        class PreEmployeeIdValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: StoreEmployee.Partial) -> typing.Any:
                ...

        class EmployeeIdValidator(typing_extensions.Protocol):
            def __call__(self, __v: EmployeeId, __values: StoreEmployee.Partial) -> EmployeeId:
                ...

        class PreNameValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: StoreEmployee.Partial) -> typing.Any:
                ...

        class NameValidator(typing_extensions.Protocol):
            def __call__(self, __v: str, __values: StoreEmployee.Partial) -> str:
                ...

        class PreAgeValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: StoreEmployee.Partial) -> typing.Any:
                ...

        class AgeValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Optional[int], __values: StoreEmployee.Partial) -> typing.Optional[int]:
                ...

        class PrePlantsValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: StoreEmployee.Partial) -> typing.Any:
                ...

        class PlantsValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.List[Plant], __values: StoreEmployee.Partial) -> typing.List[Plant]:
                ...

        class PreLifetimeSpendValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: StoreEmployee.Partial) -> typing.Any:
                ...

        class LifetimeSpendValidator(typing_extensions.Protocol):
            def __call__(self, __v: float, __values: StoreEmployee.Partial) -> float:
                ...

        class PreIdValidator(typing_extensions.Protocol):
            def __call__(self, __v: typing.Any, __values: StoreEmployee.Partial) -> typing.Any:
                ...

        class IdValidator(typing_extensions.Protocol):
            def __call__(self, __v: OwnerId, __values: StoreEmployee.Partial) -> OwnerId:
                ...

        class _PreRootValidator(typing_extensions.Protocol):
            def __call__(self, __values: typing.Any) -> typing.Any:
                ...

        class _RootValidator(typing_extensions.Protocol):
            def __call__(self, __values: StoreEmployee.Partial) -> StoreEmployee.Partial:
                ...

    @pydantic.root_validator(pre=True)
    def _pre_validate(cls, values: StoreEmployee.Partial) -> StoreEmployee.Partial:
        for validator in StoreEmployee.Validators._pre_validators:
            values = validator(values)
        return values

    @pydantic.root_validator(pre=False)
    def _post_validate(cls, values: StoreEmployee.Partial) -> StoreEmployee.Partial:
        for validator in StoreEmployee.Validators._post_validators:
            values = validator(values)
        return values

    @pydantic.validator("employee_id", pre=True)
    def _pre_validate_employee_id(cls, v: EmployeeId, values: StoreEmployee.Partial) -> EmployeeId:
        for validator in StoreEmployee.Validators._employee_id_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("employee_id", pre=False)
    def _post_validate_employee_id(cls, v: EmployeeId, values: StoreEmployee.Partial) -> EmployeeId:
        for validator in StoreEmployee.Validators._employee_id_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("name", pre=True)
    def _pre_validate_name(cls, v: str, values: StoreEmployee.Partial) -> str:
        v = super()._pre_validate_name(v, values)
        for validator in StoreEmployee.Validators._name_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("name", pre=False)
    def _post_validate_name(cls, v: str, values: StoreEmployee.Partial) -> str:
        v = super()._post_validate_name(v, values)
        for validator in StoreEmployee.Validators._name_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("age", pre=True)
    def _pre_validate_age(cls, v: typing.Optional[int], values: StoreEmployee.Partial) -> typing.Optional[int]:
        v = super()._pre_validate_age(v, values)
        for validator in StoreEmployee.Validators._age_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("age", pre=False)
    def _post_validate_age(cls, v: typing.Optional[int], values: StoreEmployee.Partial) -> typing.Optional[int]:
        v = super()._post_validate_age(v, values)
        for validator in StoreEmployee.Validators._age_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("plants", pre=True)
    def _pre_validate_plants(cls, v: typing.List[Plant], values: StoreEmployee.Partial) -> typing.List[Plant]:
        v = super()._pre_validate_plants(v, values)
        for validator in StoreEmployee.Validators._plants_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("plants", pre=False)
    def _post_validate_plants(cls, v: typing.List[Plant], values: StoreEmployee.Partial) -> typing.List[Plant]:
        v = super()._post_validate_plants(v, values)
        for validator in StoreEmployee.Validators._plants_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("lifetime_spend", pre=True)
    def _pre_validate_lifetime_spend(cls, v: float, values: StoreEmployee.Partial) -> float:
        v = super()._pre_validate_lifetime_spend(v, values)
        for validator in StoreEmployee.Validators._lifetime_spend_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("lifetime_spend", pre=False)
    def _post_validate_lifetime_spend(cls, v: float, values: StoreEmployee.Partial) -> float:
        v = super()._post_validate_lifetime_spend(v, values)
        for validator in StoreEmployee.Validators._lifetime_spend_post_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("id", pre=True)
    def _pre_validate_id(cls, v: OwnerId, values: StoreEmployee.Partial) -> OwnerId:
        v = super()._pre_validate_id(v, values)
        for validator in StoreEmployee.Validators._id_pre_validators:
            v = validator(v, values)
        return v

    @pydantic.validator("id", pre=False)
    def _post_validate_id(cls, v: OwnerId, values: StoreEmployee.Partial) -> OwnerId:
        v = super()._post_validate_id(v, values)
        for validator in StoreEmployee.Validators._id_post_validators:
            v = validator(v, values)
        return v

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        extra = pydantic.Extra.forbid
